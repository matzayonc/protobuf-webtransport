// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "hello.proto" (package "chat", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Messenger } from "./hello";
import type { Empty } from "./hello";
import type { Messages } from "./hello";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PublishReply } from "./hello";
import type { PublishRequest } from "./hello";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chat.Messenger
 */
export interface IMessengerClient {
    /**
     * @generated from protobuf rpc: Publish(chat.PublishRequest) returns (chat.PublishReply);
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, PublishReply>;
    /**
     * @generated from protobuf rpc: Update(chat.Messages) returns (chat.PublishReply);
     */
    update(input: Messages, options?: RpcOptions): UnaryCall<Messages, PublishReply>;
    /**
     * @generated from protobuf rpc: Fetch(chat.Empty) returns (chat.Messages);
     */
    fetch(input: Empty, options?: RpcOptions): UnaryCall<Empty, Messages>;
}
/**
 * @generated from protobuf service chat.Messenger
 */
export class MessengerClient implements IMessengerClient, ServiceInfo {
    typeName = Messenger.typeName;
    methods = Messenger.methods;
    options = Messenger.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Publish(chat.PublishRequest) returns (chat.PublishReply);
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, PublishReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishRequest, PublishReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(chat.Messages) returns (chat.PublishReply);
     */
    update(input: Messages, options?: RpcOptions): UnaryCall<Messages, PublishReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Messages, PublishReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Fetch(chat.Empty) returns (chat.Messages);
     */
    fetch(input: Empty, options?: RpcOptions): UnaryCall<Empty, Messages> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Messages>("unary", this._transport, method, opt, input);
    }
}
